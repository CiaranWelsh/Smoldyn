# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libsmoldyn')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libsmoldyn')
    _libsmoldyn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsmoldyn', [dirname(__file__)])
        except ImportError:
            import _libsmoldyn
            return _libsmoldyn
        try:
            _mod = imp.load_module('_libsmoldyn', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libsmoldyn = swig_import_helper()
    del swig_import_helper
else:
    import _libsmoldyn
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

ECok = _libsmoldyn.ECok
ECnotify = _libsmoldyn.ECnotify
ECwarning = _libsmoldyn.ECwarning
ECnonexist = _libsmoldyn.ECnonexist
ECall = _libsmoldyn.ECall
ECmissing = _libsmoldyn.ECmissing
ECbounds = _libsmoldyn.ECbounds
ECsyntax = _libsmoldyn.ECsyntax
ECerror = _libsmoldyn.ECerror
ECmemory = _libsmoldyn.ECmemory
ECbug = _libsmoldyn.ECbug
ECsame = _libsmoldyn.ECsame
ECwildcard = _libsmoldyn.ECwildcard

def smolGetVersion():
    return _libsmoldyn.smolGetVersion()
smolGetVersion = _libsmoldyn.smolGetVersion

def smolSetLogging(logfile, logFunction):
    return _libsmoldyn.smolSetLogging(logfile, logFunction)
smolSetLogging = _libsmoldyn.smolSetLogging

def smolSetThrowing(corethreshold, libthreshold):
    return _libsmoldyn.smolSetThrowing(corethreshold, libthreshold)
smolSetThrowing = _libsmoldyn.smolSetThrowing

def smolSetError(errorfunction, errorcode, errorstring):
    return _libsmoldyn.smolSetError(errorfunction, errorcode, errorstring)
smolSetError = _libsmoldyn.smolSetError

def smolSetErrorNT(errorfunction, errorcode, errorstring):
    return _libsmoldyn.smolSetErrorNT(errorfunction, errorcode, errorstring)
smolSetErrorNT = _libsmoldyn.smolSetErrorNT

def smolGetError(errorfunction, errorstring, clearerror):
    return _libsmoldyn.smolGetError(errorfunction, errorstring, clearerror)
smolGetError = _libsmoldyn.smolGetError

def smolClearError():
    return _libsmoldyn.smolClearError()
smolClearError = _libsmoldyn.smolClearError

def smolSetDebugMode(debugmode):
    return _libsmoldyn.smolSetDebugMode(debugmode)
smolSetDebugMode = _libsmoldyn.smolSetDebugMode

def smolErrorCodeToString(erc, string):
    return _libsmoldyn.smolErrorCodeToString(erc, string)
smolErrorCodeToString = _libsmoldyn.smolErrorCodeToString

def smolNewSim(dim, lowbounds, highbounds):
    return _libsmoldyn.smolNewSim(dim, lowbounds, highbounds)
smolNewSim = _libsmoldyn.smolNewSim

def smolUpdateSim(sim):
    return _libsmoldyn.smolUpdateSim(sim)
smolUpdateSim = _libsmoldyn.smolUpdateSim

def smolRunTimeStep(sim):
    return _libsmoldyn.smolRunTimeStep(sim)
smolRunTimeStep = _libsmoldyn.smolRunTimeStep

def smolRunSim(sim):
    return _libsmoldyn.smolRunSim(sim)
smolRunSim = _libsmoldyn.smolRunSim

def smolRunSimUntil(sim, breaktime):
    return _libsmoldyn.smolRunSimUntil(sim, breaktime)
smolRunSimUntil = _libsmoldyn.smolRunSimUntil

def smolFreeSim(sim):
    return _libsmoldyn.smolFreeSim(sim)
smolFreeSim = _libsmoldyn.smolFreeSim

def smolDisplaySim(sim):
    return _libsmoldyn.smolDisplaySim(sim)
smolDisplaySim = _libsmoldyn.smolDisplaySim

def smolPrepareSimFromFile(filepath, filename, flags):
    return _libsmoldyn.smolPrepareSimFromFile(filepath, filename, flags)
smolPrepareSimFromFile = _libsmoldyn.smolPrepareSimFromFile

def smolLoadSimFromFile(filepath, filename, simpointer, flags):
    return _libsmoldyn.smolLoadSimFromFile(filepath, filename, simpointer, flags)
smolLoadSimFromFile = _libsmoldyn.smolLoadSimFromFile

def smolReadConfigString(sim, statement, parameters):
    return _libsmoldyn.smolReadConfigString(sim, statement, parameters)
smolReadConfigString = _libsmoldyn.smolReadConfigString

def smolSetSimTimes(sim, timestart, timestop, timestep):
    return _libsmoldyn.smolSetSimTimes(sim, timestart, timestop, timestep)
smolSetSimTimes = _libsmoldyn.smolSetSimTimes

def smolSetTimeStart(sim, timestart):
    return _libsmoldyn.smolSetTimeStart(sim, timestart)
smolSetTimeStart = _libsmoldyn.smolSetTimeStart

def smolSetTimeStop(sim, timestop):
    return _libsmoldyn.smolSetTimeStop(sim, timestop)
smolSetTimeStop = _libsmoldyn.smolSetTimeStop

def smolSetTimeNow(sim, timenow):
    return _libsmoldyn.smolSetTimeNow(sim, timenow)
smolSetTimeNow = _libsmoldyn.smolSetTimeNow

def smolSetTimeStep(sim, timestep):
    return _libsmoldyn.smolSetTimeStep(sim, timestep)
smolSetTimeStep = _libsmoldyn.smolSetTimeStep

def smolSetRandomSeed(sim, seed):
    return _libsmoldyn.smolSetRandomSeed(sim, seed)
smolSetRandomSeed = _libsmoldyn.smolSetRandomSeed

def smolSetPartitions(sim, method, value):
    return _libsmoldyn.smolSetPartitions(sim, method, value)
smolSetPartitions = _libsmoldyn.smolSetPartitions

def smolSetGraphicsParams(sim, method, timesteps, delay):
    return _libsmoldyn.smolSetGraphicsParams(sim, method, timesteps, delay)
smolSetGraphicsParams = _libsmoldyn.smolSetGraphicsParams

def smolSetTiffParams(sim, timesteps, tiffname, lowcount, highcount):
    return _libsmoldyn.smolSetTiffParams(sim, timesteps, tiffname, lowcount, highcount)
smolSetTiffParams = _libsmoldyn.smolSetTiffParams

def smolSetLightParams(sim, lightindex, ambient, diffuse, specular, position):
    return _libsmoldyn.smolSetLightParams(sim, lightindex, ambient, diffuse, specular, position)
smolSetLightParams = _libsmoldyn.smolSetLightParams

def smolSetBackgroundStyle(sim, color):
    return _libsmoldyn.smolSetBackgroundStyle(sim, color)
smolSetBackgroundStyle = _libsmoldyn.smolSetBackgroundStyle

def smolSetFrameStyle(sim, thickness, color):
    return _libsmoldyn.smolSetFrameStyle(sim, thickness, color)
smolSetFrameStyle = _libsmoldyn.smolSetFrameStyle

def smolSetGridStyle(sim, thickness, color):
    return _libsmoldyn.smolSetGridStyle(sim, thickness, color)
smolSetGridStyle = _libsmoldyn.smolSetGridStyle

def smolSetTextStyle(sim, color):
    return _libsmoldyn.smolSetTextStyle(sim, color)
smolSetTextStyle = _libsmoldyn.smolSetTextStyle

def smolAddTextDisplay(sim, item):
    return _libsmoldyn.smolAddTextDisplay(sim, item)
smolAddTextDisplay = _libsmoldyn.smolAddTextDisplay

def smolSetOutputPath(sim, path):
    return _libsmoldyn.smolSetOutputPath(sim, path)
smolSetOutputPath = _libsmoldyn.smolSetOutputPath

def smolAddOutputFile(sim, filename, suffix, append):
    return _libsmoldyn.smolAddOutputFile(sim, filename, suffix, append)
smolAddOutputFile = _libsmoldyn.smolAddOutputFile

def smolAddCommand(sim, type, on, off, step, multiplier, commandstring):
    return _libsmoldyn.smolAddCommand(sim, type, on, off, step, multiplier, commandstring)
smolAddCommand = _libsmoldyn.smolAddCommand

def smolAddCommandFromString(sim, string):
    return _libsmoldyn.smolAddCommandFromString(sim, string)
smolAddCommandFromString = _libsmoldyn.smolAddCommandFromString

def smolAddSpecies(sim, species, mollist):
    return _libsmoldyn.smolAddSpecies(sim, species, mollist)
smolAddSpecies = _libsmoldyn.smolAddSpecies

def smolGetSpeciesIndex(sim, species):
    return _libsmoldyn.smolGetSpeciesIndex(sim, species)
smolGetSpeciesIndex = _libsmoldyn.smolGetSpeciesIndex

def smolGetSpeciesIndexNT(sim, species):
    return _libsmoldyn.smolGetSpeciesIndexNT(sim, species)
smolGetSpeciesIndexNT = _libsmoldyn.smolGetSpeciesIndexNT

def smolGetSpeciesName(sim, speciesindex, species):
    return _libsmoldyn.smolGetSpeciesName(sim, speciesindex, species)
smolGetSpeciesName = _libsmoldyn.smolGetSpeciesName

def smolSetSpeciesMobility(sim, species, state, difc, drift, difmatrix):
    return _libsmoldyn.smolSetSpeciesMobility(sim, species, state, difc, drift, difmatrix)
smolSetSpeciesMobility = _libsmoldyn.smolSetSpeciesMobility

def smolAddMolList(sim, mollist):
    return _libsmoldyn.smolAddMolList(sim, mollist)
smolAddMolList = _libsmoldyn.smolAddMolList

def smolGetMolListIndex(sim, mollist):
    return _libsmoldyn.smolGetMolListIndex(sim, mollist)
smolGetMolListIndex = _libsmoldyn.smolGetMolListIndex

def smolGetMolListIndexNT(sim, mollist):
    return _libsmoldyn.smolGetMolListIndexNT(sim, mollist)
smolGetMolListIndexNT = _libsmoldyn.smolGetMolListIndexNT

def smolGetMolListName(sim, mollistindex, mollist):
    return _libsmoldyn.smolGetMolListName(sim, mollistindex, mollist)
smolGetMolListName = _libsmoldyn.smolGetMolListName

def smolSetMolList(sim, species, state, mollist):
    return _libsmoldyn.smolSetMolList(sim, species, state, mollist)
smolSetMolList = _libsmoldyn.smolSetMolList

def smolSetMaxMolecules(sim, maxmolecules):
    return _libsmoldyn.smolSetMaxMolecules(sim, maxmolecules)
smolSetMaxMolecules = _libsmoldyn.smolSetMaxMolecules

def smolAddSolutionMolecules(sim, species, number, lowposition, highposition):
    return _libsmoldyn.smolAddSolutionMolecules(sim, species, number, lowposition, highposition)
smolAddSolutionMolecules = _libsmoldyn.smolAddSolutionMolecules

def smolAddCompartmentMolecules(sim, species, number, compartment):
    return _libsmoldyn.smolAddCompartmentMolecules(sim, species, number, compartment)
smolAddCompartmentMolecules = _libsmoldyn.smolAddCompartmentMolecules

def smolAddSurfaceMolecules(sim, species, state, number, surface, panelshape, panel, position):
    return _libsmoldyn.smolAddSurfaceMolecules(sim, species, state, number, surface, panelshape, panel, position)
smolAddSurfaceMolecules = _libsmoldyn.smolAddSurfaceMolecules

def smolGetMoleculeCount(sim, species, state):
    return _libsmoldyn.smolGetMoleculeCount(sim, species, state)
smolGetMoleculeCount = _libsmoldyn.smolGetMoleculeCount

def smolSetMoleculeStyle(sim, species, state, size, color):
    return _libsmoldyn.smolSetMoleculeStyle(sim, species, state, size, color)
smolSetMoleculeStyle = _libsmoldyn.smolSetMoleculeStyle

def smolSetBoundaryType(sim, dimension, highside, type):
    return _libsmoldyn.smolSetBoundaryType(sim, dimension, highside, type)
smolSetBoundaryType = _libsmoldyn.smolSetBoundaryType

def smolAddSurface(sim, surface):
    return _libsmoldyn.smolAddSurface(sim, surface)
smolAddSurface = _libsmoldyn.smolAddSurface

def smolGetSurfaceIndex(sim, surface):
    return _libsmoldyn.smolGetSurfaceIndex(sim, surface)
smolGetSurfaceIndex = _libsmoldyn.smolGetSurfaceIndex

def smolGetSurfaceIndexNT(sim, surface):
    return _libsmoldyn.smolGetSurfaceIndexNT(sim, surface)
smolGetSurfaceIndexNT = _libsmoldyn.smolGetSurfaceIndexNT

def smolGetSurfaceName(sim, surfaceindex, surface):
    return _libsmoldyn.smolGetSurfaceName(sim, surfaceindex, surface)
smolGetSurfaceName = _libsmoldyn.smolGetSurfaceName

def smolSetSurfaceAction(sim, surface, face, species, state, action, newspecies):
    return _libsmoldyn.smolSetSurfaceAction(sim, surface, face, species, state, action, newspecies)
smolSetSurfaceAction = _libsmoldyn.smolSetSurfaceAction

def smolSetSurfaceRate(sim, surface, species, state, state1, state2, rate, newspecies, isinternal):
    return _libsmoldyn.smolSetSurfaceRate(sim, surface, species, state, state1, state2, rate, newspecies, isinternal)
smolSetSurfaceRate = _libsmoldyn.smolSetSurfaceRate

def smolAddPanel(sim, surface, panelshape, panel, axisstring, params):
    return _libsmoldyn.smolAddPanel(sim, surface, panelshape, panel, axisstring, params)
smolAddPanel = _libsmoldyn.smolAddPanel

def smolGetPanelIndex(sim, surface, panelshapeptr, panel):
    return _libsmoldyn.smolGetPanelIndex(sim, surface, panelshapeptr, panel)
smolGetPanelIndex = _libsmoldyn.smolGetPanelIndex

def smolGetPanelIndexNT(sim, surface, panelshapeptr, panel):
    return _libsmoldyn.smolGetPanelIndexNT(sim, surface, panelshapeptr, panel)
smolGetPanelIndexNT = _libsmoldyn.smolGetPanelIndexNT

def smolGetPanelName(sim, surface, panelshape, panelindex, panel):
    return _libsmoldyn.smolGetPanelName(sim, surface, panelshape, panelindex, panel)
smolGetPanelName = _libsmoldyn.smolGetPanelName

def smolSetPanelJump(sim, surface, panel1, face1, panel2, face2, isbidirectional):
    return _libsmoldyn.smolSetPanelJump(sim, surface, panel1, face1, panel2, face2, isbidirectional)
smolSetPanelJump = _libsmoldyn.smolSetPanelJump

def smolAddSurfaceUnboundedEmitter(sim, surface, face, species, emitamount, emitposition):
    return _libsmoldyn.smolAddSurfaceUnboundedEmitter(sim, surface, face, species, emitamount, emitposition)
smolAddSurfaceUnboundedEmitter = _libsmoldyn.smolAddSurfaceUnboundedEmitter

def smolSetSurfaceSimParams(sim, parameter, value):
    return _libsmoldyn.smolSetSurfaceSimParams(sim, parameter, value)
smolSetSurfaceSimParams = _libsmoldyn.smolSetSurfaceSimParams

def smolAddPanelNeighbor(sim, surface1, panel1, surface2, panel2, reciprocal):
    return _libsmoldyn.smolAddPanelNeighbor(sim, surface1, panel1, surface2, panel2, reciprocal)
smolAddPanelNeighbor = _libsmoldyn.smolAddPanelNeighbor

def smolSetSurfaceStyle(sim, surface, face, mode, thickness, color, stipplefactor, stipplepattern, shininess):
    return _libsmoldyn.smolSetSurfaceStyle(sim, surface, face, mode, thickness, color, stipplefactor, stipplepattern, shininess)
smolSetSurfaceStyle = _libsmoldyn.smolSetSurfaceStyle

def smolAddCompartment(sim, compartment):
    return _libsmoldyn.smolAddCompartment(sim, compartment)
smolAddCompartment = _libsmoldyn.smolAddCompartment

def smolGetCompartmentIndex(sim, compartment):
    return _libsmoldyn.smolGetCompartmentIndex(sim, compartment)
smolGetCompartmentIndex = _libsmoldyn.smolGetCompartmentIndex

def smolGetCompartmentIndexNT(sim, compartment):
    return _libsmoldyn.smolGetCompartmentIndexNT(sim, compartment)
smolGetCompartmentIndexNT = _libsmoldyn.smolGetCompartmentIndexNT

def smolGetCompartmentName(sim, compartmentindex, compartment):
    return _libsmoldyn.smolGetCompartmentName(sim, compartmentindex, compartment)
smolGetCompartmentName = _libsmoldyn.smolGetCompartmentName

def smolAddCompartmentSurface(sim, compartment, surface):
    return _libsmoldyn.smolAddCompartmentSurface(sim, compartment, surface)
smolAddCompartmentSurface = _libsmoldyn.smolAddCompartmentSurface

def smolAddCompartmentPoint(sim, compartment, point):
    return _libsmoldyn.smolAddCompartmentPoint(sim, compartment, point)
smolAddCompartmentPoint = _libsmoldyn.smolAddCompartmentPoint

def smolAddCompartmentLogic(sim, compartment, logic, compartment2):
    return _libsmoldyn.smolAddCompartmentLogic(sim, compartment, logic, compartment2)
smolAddCompartmentLogic = _libsmoldyn.smolAddCompartmentLogic

def smolAddReaction(sim, reaction, reactant1, rstate1, reactant2, rstate2, nproduct, productspecies, productstates, rate):
    return _libsmoldyn.smolAddReaction(sim, reaction, reactant1, rstate1, reactant2, rstate2, nproduct, productspecies, productstates, rate)
smolAddReaction = _libsmoldyn.smolAddReaction

def smolGetReactionIndex(sim, orderptr, reaction):
    return _libsmoldyn.smolGetReactionIndex(sim, orderptr, reaction)
smolGetReactionIndex = _libsmoldyn.smolGetReactionIndex

def smolGetReactionIndexNT(sim, orderptr, reaction):
    return _libsmoldyn.smolGetReactionIndexNT(sim, orderptr, reaction)
smolGetReactionIndexNT = _libsmoldyn.smolGetReactionIndexNT

def smolGetReactionName(sim, order, reactionindex, reaction):
    return _libsmoldyn.smolGetReactionName(sim, order, reactionindex, reaction)
smolGetReactionName = _libsmoldyn.smolGetReactionName

def smolSetReactionRate(sim, reaction, rate, type):
    return _libsmoldyn.smolSetReactionRate(sim, reaction, rate, type)
smolSetReactionRate = _libsmoldyn.smolSetReactionRate

def smolSetReactionRegion(sim, reaction, compartment, surface):
    return _libsmoldyn.smolSetReactionRegion(sim, reaction, compartment, surface)
smolSetReactionRegion = _libsmoldyn.smolSetReactionRegion

def smolSetReactionProducts(sim, reaction, method, parameter, product, position):
    return _libsmoldyn.smolSetReactionProducts(sim, reaction, method, parameter, product, position)
smolSetReactionProducts = _libsmoldyn.smolSetReactionProducts

def smolAddPort(sim, port, surface, face):
    return _libsmoldyn.smolAddPort(sim, port, surface, face)
smolAddPort = _libsmoldyn.smolAddPort

def smolGetPortIndex(sim, port):
    return _libsmoldyn.smolGetPortIndex(sim, port)
smolGetPortIndex = _libsmoldyn.smolGetPortIndex

def smolGetPortIndexNT(sim, port):
    return _libsmoldyn.smolGetPortIndexNT(sim, port)
smolGetPortIndexNT = _libsmoldyn.smolGetPortIndexNT

def smolGetPortName(sim, portindex, port):
    return _libsmoldyn.smolGetPortName(sim, portindex, port)
smolGetPortName = _libsmoldyn.smolGetPortName

def smolAddPortMolecules(sim, port, nmolec, species, positions):
    return _libsmoldyn.smolAddPortMolecules(sim, port, nmolec, species, positions)
smolAddPortMolecules = _libsmoldyn.smolAddPortMolecules

def smolGetPortMolecules(sim, port, species, state, remove):
    return _libsmoldyn.smolGetPortMolecules(sim, port, species, state, remove)
smolGetPortMolecules = _libsmoldyn.smolGetPortMolecules

def smolAddLattice(sim, lattice, min, max, dx, btype):
    return _libsmoldyn.smolAddLattice(sim, lattice, min, max, dx, btype)
smolAddLattice = _libsmoldyn.smolAddLattice

def smolAddLatticePort(sim, lattice, port):
    return _libsmoldyn.smolAddLatticePort(sim, lattice, port)
smolAddLatticePort = _libsmoldyn.smolAddLatticePort

def smolAddLatticeSpecies(sim, lattice, species):
    return _libsmoldyn.smolAddLatticeSpecies(sim, lattice, species)
smolAddLatticeSpecies = _libsmoldyn.smolAddLatticeSpecies

def smolGetLatticeIndex(sim, lattice):
    return _libsmoldyn.smolGetLatticeIndex(sim, lattice)
smolGetLatticeIndex = _libsmoldyn.smolGetLatticeIndex

def smolGetLatticeIndexNT(sim, lattice):
    return _libsmoldyn.smolGetLatticeIndexNT(sim, lattice)
smolGetLatticeIndexNT = _libsmoldyn.smolGetLatticeIndexNT

def smolGetLatticeName(sim, latticeindex, lattice):
    return _libsmoldyn.smolGetLatticeName(sim, latticeindex, lattice)
smolGetLatticeName = _libsmoldyn.smolGetLatticeName

def smolAddLatticeMolecules(sim, lattice, species, number, lowposition, highposition):
    return _libsmoldyn.smolAddLatticeMolecules(sim, lattice, species, number, lowposition, highposition)
smolAddLatticeMolecules = _libsmoldyn.smolAddLatticeMolecules

def smolAddLatticeReaction(sim, lattice, reaction, move):
    return _libsmoldyn.smolAddLatticeReaction(sim, lattice, reaction, move)
smolAddLatticeReaction = _libsmoldyn.smolAddLatticeReaction
# This file is compatible with both classic and new-style classes.


